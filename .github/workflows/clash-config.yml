name: Generate Clash Config

on:
  schedule:
    # 每4小时运行一次（UTC时间）
    - cron: '0 */4 * * *'
  workflow_dispatch:  # 允许手动触发

jobs:
  generate:
    runs-on: ubuntu-latest
    # 将环境变量提升到 job 级别
    env:
      LANG: en_US.UTF-8
      LC_ALL: en_US.UTF-8
      GITHUB_TOKEN: ${{ secrets.TOKEN }}
      # 目录名的唯一真相来源：未来若要修改，只需改动这里
      PROXY_DIR: external_proxies

    steps:
    # 步骤1: 检出代码仓库
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    # 步骤2: 设置 Python 环境
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'

    # 步骤3: 安装 Python 依赖
    - name: Install dependencies
      run: pip install -r requirements.txt

    # 步骤4: 创建所需目录 (使用环境变量)
    - name: Create directories
      run: mkdir -p ${{ env.PROXY_DIR }} config

    # 步骤5: 下载上次发布的健康节点 (实现增量更新)
    - name: Download Previous Healthy Nodes
      run: |
        echo "Downloading previous config.yaml from latest release..."
        # 使用 curl 下载，如果下载失败 (例如第一次运行，还没有release)，则静默失败并继续
        curl -L --fail -o ${{ env.PROXY_DIR }}/previous_config.yaml \
          https://github.com/${{ github.repository }}/releases/latest/download/config.yaml || \
          echo "Could not download previous config.yaml, proceeding without it."

    # 步骤6: 下载外部代理订阅文件 (使用环境变量)
    - name: Download external proxies
      env:
        URL_LIST: ${{ vars.URL_LIST }}
      run: |
        IFS=' ' read -ra URLS <<< "$URL_LIST"
        for url in "${URLS[@]}"; do
          basename=$(echo "$url" | sed -E 's#^https?://[^/]+/##; s/[?#].*$//; s#/#_#g')
          timestamp=$(date +%s%N)
          filename="${basename}_${timestamp}.txt"
          # 使用在顶层定义的 PROXY_DIR 变量
          output="${{ env.PROXY_DIR }}/${filename}"
          echo "Downloading $url to $output"
          curl -sSL "$url" -o "$output" || echo "Failed to download: $url"
        done

    # 步骤6: 合并所有订阅源的节点并去重
    - name: Merge All Proxies
      run: |
        python scripts/merge_proxies.py \
          --proxies-dir ${{ env.PROXY_DIR }} \
          --output all_unique_nodes.yaml

    # 步骤7: 使用新的Python脚本进行节点测试和IP归属地校准
    - name: Test Nodes and Calibrate Country Code
      id: test_nodes
      run: |
        # 1. 下载 mihomo 核心
        echo "Downloading mihomo executable..."
        curl -L --fail -o mihomo.gz https://github.com/MetaCubeX/mihomo/releases/download/v1.19.11/mihomo-linux-amd64-v1.19.11.gz
        gunzip mihomo.gz
        chmod +x mihomo
        mv mihomo /usr/local/bin/mihomo

        # 2. 下载 GeoIP 数据库
        echo "Downloading GeoIP database..."
        curl -L --fail -o geoip.dat https://github.com/Loyalsoldier/geoip/releases/latest/download/geoip.dat

        # 3. 运行测试和校准脚本
        echo "Running node tester and calibration script..."
        python scripts/node_tester.py \
          --input-file all_unique_nodes.yaml \
          --output healthy_nodes_list.yaml \
          --clash-path /usr/local/bin/mihomo \
          --geoip-dat-path ./geoip.dat \
          --test-url "https://www.google.com/generate_204"
        
        # 4. 设置输出，供下一步使用
        echo "Setting output for next step..."
        echo "healthy_nodes_file=healthy_nodes_list.yaml" >> $GITHUB_OUTPUT

    # 步骤8: 使用健康的节点分发生成所有最终配置文件
    - name: Generate Final Configs from Healthy Nodes
      id: generate
      run: |
        python scripts/generate_config.py --use-pre-tested-nodes ${{ steps.test_nodes.outputs.healthy_nodes_file }}

    # 步骤8: 上传所有构建产物
    - name: Upload All Config Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: clash-configs
        path: config/*.yaml

    # 步骤8: 创建或更新 GitHub Release
    - name: Create or Update Release
      uses: softprops/action-gh-release@v1
      with:
        files: config/*.yaml
        tag_name: latest-config
        name: "🚀 Latest Clash Configurations"
        body: "Automated update of Clash configuration files."
        generate_release_notes: true

    # 步骤9: 提交并推送配置文件的变更到仓库
    - name: Commit and push config changes
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
        
        if git diff --quiet --exit-code -- 'config/*.yaml'; then
          echo "No changes to commit, skipping push."
          exit 0
        fi
        
        git add config/*.yaml
        COMMIT_MSG="chore(auto-update): Update config files at $(date +'%Y-%m-%d %H:%M')"
        git commit -m "$COMMIT_MSG"
        git push origin HEAD:main

    # 步骤10: 刷新 jsDelivr 的 CDN 缓存
    - name: Purge jsDelivr Cache
      if: success()
      env:
        FILES_TO_PURGE: ${{ steps.generate.outputs.generated_files }}
        MAX_RETRIES: 3
        RETRY_DELAY: 20
      run: |
        echo "Files to purge: $FILES_TO_PURGE"
        for file in $FILES_TO_PURGE; do
          purge_url="https://purge.jsdelivr.net/gh/${{ github.repository }}@main/$file"
          echo "Purging CDN cache for: $file"
          
          for ((i=1; i<=$MAX_RETRIES; i++)); do
            http_code=$(curl -s -o /dev/null -w "%{http_code}" "$purge_url")
            if [ $http_code -eq 200 ]; then
              echo "  ✅ Success (Attempt $i)"
              break
            elif [ $i -eq $MAX_RETRIES ]; then
              echo "  ❌ Failed after $MAX_RETRIES attempts (HTTP code: $http_code)"
              exit 1
            else
              echo "  ⚠️ Failed with code $http_code, retrying in $RETRY_DELAY seconds..."
              sleep $RETRY_DELAY
            fi
          done
        done
        echo "🎉 All files purged successfully."