name: Generate Clash Config

on:
  schedule:
    # 每4小时运行一次（UTC时间）
    - cron: '0 */4 * * *'
  workflow_dispatch:  # 允许手动触发

jobs:
  generate:
    runs-on: ubuntu-latest
    env:
      LANG: en_US.UTF-8
      LC_ALL: en_US.UTF-8
      GITHUB_TOKEN: ${{ secrets.TOKEN }}
      # 基础配置
      PROXY_DIR: external_proxies
      DELAY_LIMIT: "4000"
      MAX_WORKERS: "100"
      LOG_LEVEL: "INFO"

    steps:
    # 步骤1: 检出代码仓库
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    # 步骤2: 设置 Python 环境
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'

    # 步骤3: 安装 Python 依赖
    - name: Install dependencies
      run: |
        pip install -r requirements.txt pysocks

    # 新增步骤: 安装 q DNS 工具
    - name: Install q DNS Utility
      run: |
        echo "Installing q DNS utility..."
        Q_VERSION="v1.1.1" # 可以指定一个稳定版本
        Q_URL="https://github.com/natesales/q/releases/download/${Q_VERSION}/q_${Q_VERSION}_linux_amd64.tar.gz"
        curl -sSL "$Q_URL" -o q.tar.gz
        tar -xzf q.tar.gz
        sudo mv q /usr/local/bin/
        echo "q utility installed successfully."

    # 步骤4: 创建所需目录
    - name: Create directories
      run: |
        mkdir -p ${{ env.PROXY_DIR }} config core
        touch core/__init__.py

    # 步骤5: 下载上次发布的健康节点
    - name: Download Previous Healthy Nodes
      run: |
        echo "Downloading previous config.yaml from latest release..."
        curl -L --fail -o ${{ env.PROXY_DIR }}/previous_config.yaml \
          https://github.com/${{ github.repository }}/releases/latest/download/config.yaml || \
          echo "Could not download previous config.yaml, proceeding without it."

    # 步骤6: 下载外部代理订阅文件
    - name: Download external proxies
      env:
        URL_LIST: ${{ vars.URL_LIST }}
      run: |
        IFS=' ' read -ra URLS <<< "$URL_LIST"
        for url in "${URLS[@]}"; do
          basename=$(echo "$url" | sed -E 's#^https?://[^/]+/##; s/[?#].*$//; s#/#_#g')
          timestamp=$(date +%s%N)
          filename="${basename}_${timestamp}.txt"
          output="${{ env.PROXY_DIR }}/${filename}"
          echo "Downloading $url to $output"
          curl -sSL "$url" -o "$output" || echo "Failed to download: $url"
        done

    # 步骤7: 合并所有订阅源的节点并去重
    - name: Merge All Proxies
      run: |
        python scripts/merge_proxies.py \
          --proxies-dir ${{ env.PROXY_DIR }} \
          --output all_unique_nodes.yaml

    - name: Setup mihomo
      run: |
        echo "Downloading mihomo executable from busymilk/mihomo..."
        curl -L --fail -o mihomo \
          https://github.com/busymilk/mihomo/releases/latest/download/mihomo-linux-amd64
        chmod +x mihomo
        mv mihomo /usr/local/bin/mihomo

    # 步骤: 验证并过滤所有代理节点的格式
    - name: Validate and Filter All Proxies
      id: validate_nodes
      run: |
        echo "开始验证并过滤所有合并后节点的格式..."
        python scripts/validate_proxies.py \
          --file all_unique_nodes.yaml \
          --output-valid valid_nodes.yaml \
          --mihomo-path /usr/local/bin/mihomo
        echo "filtered_nodes_file=valid_nodes.yaml" >> $GITHUB_OUTPUT

    # 步骤10: 测试节点延迟
    - name: Test Node Latency
      id: test_nodes
      run: |
        # 构建命令参数
        cmd_args="--input-file ${{ steps.validate_nodes.outputs.filtered_nodes_file }}"
        cmd_args="$cmd_args --output healthy_nodes_list.yaml"
        cmd_args="$cmd_args --clash-path /usr/local/bin/mihomo"
        cmd_args="$cmd_args --delay-limit ${{ env.DELAY_LIMIT }}"
        cmd_args="$cmd_args --max-workers ${{ env.MAX_WORKERS }}"
        
        echo "执行命令: python scripts/node_tester_integrated.py $cmd_args"
        python scripts/node_tester_integrated.py $cmd_args
        
        echo "healthy_nodes_file=healthy_nodes_list.yaml" >> $GITHUB_OUTPUT

    # 步骤11: 生成最终配置文件
    - name: Generate Final Configs from Healthy Nodes
      id: generate
      run: |
        python scripts/generate_config.py \
          --use-pre-tested-nodes ${{ steps.test_nodes.outputs.healthy_nodes_file }}

    # 步骤13: 上传构建产物
    - name: Upload All Config Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: clash-configs
        path: |
          config/*.yaml
          healthy_nodes_list.yaml

    # 步骤14: 获取当前时间
    - name: Get Current Time
      id: get_time
      run: echo "timestamp=$(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_OUTPUT

    # 步骤15: 创建或更新 GitHub Release
    - name: Create or Update Release
      uses: softprops/action-gh-release@v1
      with:
        files: config/*.yaml
        tag_name: latest-config
        name: "🚀 Latest Clash Configurations"
        body: |
          🌍 **自动更新的 Clash 配置文件**
          
          **更新时间**: ${{ steps.get_time.outputs.timestamp }}
          **分类方式**: 按节点名称自动分类 (Name-based Classification)
          
          **📁 配置文件说明**:
          - `config.yaml` - 所有健康节点
          - `config_*.yaml` - 各地区节点
          
          🌏 **支持地区**: 香港🇭🇰 美国🇺🇸 日本🇯🇵 英国🇬🇧 新加坡🇸🇬 台湾🇹🇼 韩国🇰🇷 德国🇩🇪 加拿大🇨🇦 澳大利亚🇦🇺
        generate_release_notes: true

    # 步骤16: 提交配置文件变更
    - name: Commit and push config changes
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
        
        if git diff --quiet --exit-code -- 'config/*.yaml'; then
          echo "No changes to commit, skipping push."
          exit 0
        fi
        
        git add config/*.yaml
        
        # 构建提交信息
        commit_msg="chore(auto-update): Update config files at $(date +'%Y-%m-%d %H:%M')"
        
        git commit -m "$commit_msg"
        git push origin HEAD:main

    # 步骤17: 刷新 CDN 缓存
    - name: Purge jsDelivr Cache
      if: success()
      env:
        FILES_TO_PURGE: ${{ steps.generate.outputs.generated_files }}
      run: |
        echo "Files to purge: $FILES_TO_PURGE"
        for file in $FILES_TO_PURGE; do
          purge_url="https://purge.jsdelivr.net/gh/${{ github.repository }}@main/$file"
          echo "Purging CDN cache for: $file"
          
          for ((i=1; i<=3; i++)); do
            http_code=$(curl -s -o /dev/null -w '%{http_code}' "$purge_url")
            if [ $http_code -eq 200 ]; then
              echo "  ✅ Success (Attempt $i)"
              break
            elif [ $i -eq 3 ]; then
              echo "  ❌ Failed after 3 attempts (HTTP code: $http_code)"
            else
              echo "  ⚠️ Failed with code $http_code, retrying..."
              sleep 10
            fi
          done
        done
        echo "🎉 CDN cache purge completed."

    # 步骤18: 清理临时文件
    - name: Cleanup
      if: always()
      run: |
        echo "清理临时文件..."
        rm -f all_unique_nodes.yaml
        rm -f valid_nodes.yaml
        rm -f config_for_test.yaml
        rm -f mihomo.gz
        echo "清理完成"