name: Generate Clash Config

on:
  schedule:
    # 每4小时运行一次（UTC时间）
    - cron: '0 */4 * * *'
  workflow_dispatch:  # 允许手动触发

jobs:
  generate:
    runs-on: ubuntu-latest
    # 将环境变量提升到 job 级别
    env:
      LANG: en_US.UTF-8
      LC_ALL: en_US.UTF-8
      GITHUB_TOKEN: ${{ secrets.TOKEN }}
      # 目录名的唯一真相来源：未来若要修改，只需改动这里
      PROXY_DIR: external_proxies

    steps:
    # 步骤1: 检出代码仓库
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    # 步骤2: 设置 Python 环境
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'

    # 步骤3: 安装 Python 依赖
    - name: Install dependencies
      run: pip install pyyaml

    # 步骤4: 创建所需目录 (使用环境变量)
    - name: Create directories
      run: mkdir -p ${{ env.PROXY_DIR }} config

    # 步骤5: 下载外部代理订阅文件 (使用环境变量)
    - name: Download external proxies
      env:
        URL_LIST: ${{ vars.URL_LIST }}
      run: |
        IFS=' ' read -ra URLS <<< "$URL_LIST"
        for url in "${URLS[@]}"; do
          basename=$(echo "$url" | sed -E 's#^https?://[^/]+/##; s/[?#].*$//; s#/#_#g')
          timestamp=$(date +%s%N)
          filename="${basename}_${timestamp}.txt"
          # 使用在顶层定义的 PROXY_DIR 变量
          output="${{ env.PROXY_DIR }}/${filename}"
          echo "Downloading $url to $output"
          curl -sSL "$url" -o "$output" || echo "Failed to download: $url"
        done

    # 步骤6: 生成所有配置文件 (由总指挥脚本全权负责)
    - name: Generate All Configs
      id: generate
      # 将 PROXY_DIR 环境变量传递给 Python 脚本
      env:
        PROXY_DIR: ${{ env.PROXY_DIR }}
      run: python -u scripts/generate_config.py

    # 步骤7: 使用 clash-speedtest 进行两阶段节点过滤
    - name: Two-Phase Node Filtering with clash-speedtest
      run: |
        # 下载并解压 clash-speedtest 工具
        echo "Downloading clash-speedtest..."
        curl -L -o clash-speedtest.tar.gz https://github.com/faceair/clash-speedtest/releases/latest/download/clash-speedtest-linux-amd64.tar.gz
        tar -zxvf clash-speedtest.tar.gz
        chmod +x clash-speedtest
        
        echo "--- Starting Two-Phase Filtering for all configs in config/ directory ---"
        # 遍历 config 目录下的所有 yaml 文件
        for config_file in config/*.yaml; do
          echo "\n[PHASE 1/2] Processing $config_file for initial connectivity check..."
          # 定义第一阶段的临时输出文件
          phase1_filtered_file="${config_file%.yaml}_phase1.yaml"
          
          # 运行快速连通性测试 (-sl 100 使用100KB文件)
          ./clash-speedtest -c "$config_file" -o "$phase1_filtered_file" -sl 100
          echo "Phase 1 for $config_file completed."

          echo "\n[PHASE 2/2] Processing $phase1_filtered_file for speed test and renaming..."
          # 第二阶段：在第一阶段的基础上进行测速和重命名
          # -sl 10240 使用10MB文件进行测试
          # -rename 根据延迟和地区信息重命名节点
          # 最终的输出会直接覆盖原始文件
          ./clash-speedtest -c "$phase1_filtered_file" -o "$config_file" -sl 10240 -rename
          echo "Phase 2 for $config_file completed. Final filtered config saved to $config_file."

          # 清理第一阶段的临时文件
          rm "$phase1_filtered_file"
        done
        echo "\n--- All configurations have been filtered and updated. ---"

    # 步骤8: 上传所有构建产物
    - name: Upload All Config Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: clash-configs
        path: config/*.yaml

    # 步骤8: 创建或更新 GitHub Release
    - name: Create or Update Release
      uses: softprops/action-gh-release@v1
      with:
        files: config/*.yaml
        tag_name: latest-config
        name: "🚀 Latest Clash Configurations"
        body: "Automated update of Clash configuration files."
        generate_release_notes: true

    # 步骤9: 提交并推送配置文件的变更到仓库
    - name: Commit and push config changes
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
        
        if git diff --quiet --exit-code -- 'config/*.yaml'; then
          echo "No changes to commit, skipping push."
          exit 0
        fi
        
        git add config/*.yaml
        COMMIT_MSG="chore(auto-update): Update config files at $(date +'%Y-%m-%d %H:%M')"
        git commit -m "$COMMIT_MSG"
        git push origin HEAD:main

    # 步骤10: 刷新 jsDelivr 的 CDN 缓存
    - name: Purge jsDelivr Cache
      if: success()
      env:
        FILES_TO_PURGE: ${{ steps.generate.outputs.generated_files }}
        MAX_RETRIES: 3
        RETRY_DELAY: 20
      run: |
        echo "Files to purge: $FILES_TO_PURGE"
        for file in $FILES_TO_PURGE; do
          purge_url="https://purge.jsdelivr.net/gh/${{ github.repository }}@main/$file"
          echo "Purging CDN cache for: $file"
          
          for ((i=1; i<=$MAX_RETRIES; i++)); do
            http_code=$(curl -s -o /dev/null -w "%{http_code}" "$purge_url")
            if [ $http_code -eq 200 ]; then
              echo "  ✅ Success (Attempt $i)"
              break
            elif [ $i -eq $MAX_RETRIES ]; then
              echo "  ❌ Failed after $MAX_RETRIES attempts (HTTP code: $http_code)"
              exit 1
            else
              echo "  ⚠️ Failed with code $http_code, retrying in $RETRY_DELAY seconds..."
              sleep $RETRY_DELAY
            fi
          done
        done
        echo "🎉 All files purged successfully."