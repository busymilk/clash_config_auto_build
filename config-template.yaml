
# Clash 通用配置模板
#clash 流程图：https://wiki.metacubex.one/config/dns/diagram/#_3


mixed-port: 7890
ipv6: true
allow-lan: true
unified-delay: true
tcp-concurrent: true
external-controller: 127.0.0.1:9090
# external-ui 用于指定 Clash 的网页控制面板
external-ui: ui
external-ui-url: "https://github.com/MetaCubeX/metacubexd/archive/refs/heads/gh-pages.zip"

# 进程匹配模式 (仅适用于 macOS/Linux)
find-process-mode: strict

# 全局 TLS 指纹，用于模仿特定客户端的 TLS 握手包
global-client-fingerprint: firefox

profile:
  store-selected: false # 不记录手动选择的代理，代理节点经常失效，没记录的必要
  store-fake-ip: true # 记录 fake-ip 的映射关系

sniffer:
  enable: true
  sniff:
    HTTP:
      ports: [80, 8080-8880]
      override-destination: true
    TLS:
      ports: [443, 8443]
    QUIC:
      ports: [443, 8443]
  skip-domain:
    - "Mijia Cloud"
    - "+.push.apple.com"

tun:
  enable: false
  stack: gvisor
  dns-hijack:
    - "any:53"
    - "tcp://any:53"
  auto-route: true
  auto-redirect: true
  auto-detect-interface: true

ntp:
  enable: true
  write-to-system: false
  server: time.apple.com
  port: 123
  interval: 30

dns:
#正确分流：https://www.aloxaf.com/2025/04/how_to_use_geosite/

  #mihomo发送给代理节点的是域名而不是ip地址，本地解析结果仅用于分流判断
  #GEOIP 规则用于根据数据包的目标 IP 地址的国家代码路由数据包，注意，是目标IP！
  #也就是dns这一坨配置，大部分是用于分流的，所以要避免本地dns的污染结果，造成根据ip进行分流的错误，本地dns解析一次，分流后，匹配走代理的请求，经过代理再进行一次dns请求
  enable: true
  ipv6: true
  use-system-hosts: false

  default-nameserver: #默认 DNS, 用于解析 DNS 服务器 的域名 必须为 IP
  - https://[2001:4860:4860::64]/dns-query
  - 94.140.14.141
  - udp://[2a10:50c0::1:ff]
  - udp://[2a10:50c0::2:ff]
  - 149.112.112.9
  - 149.112.112.112
  - udp://[2620:fe::fe]
  - udp://[2620:fe::9]

  #这里用不到proxy-server-nameserver了，github action脚本里写了，会解析好域名的ip后替换节点为直接的ip，没有解析这一步了
  #proxy-server-nameserver: #代理节点域名解析服务器，仅用于解析代理节点的域名（需要确保dns无污染，否则没法连接代理服务器啊）,如果不填则遵循 nameserver-policy、nameserver 和 fallback 的配置
  #- 'https://223.5.5.5/dns-query#proxy&ecs=39.134.187.0/24&ecs-override=true'

  direct-nameserver-follow-policy: false #是否遵循 nameserver-policy，默认为不遵守，仅当 direct-nameserver 不为空时生效
  direct-nameserver: #用于 direct 直连出口域名解析的 DNS 服务器，如果不填则遵循 nameserver-policy、nameserver 和 fallback 的配置
  - https://1.12.12.12/dns-query
  - https://223.5.5.5/dns-query


  #nameserver 在fakerip模式下的核心作用，已经从“获取IP地址”转变成了“验证域名的存在性”
  #存在了，进行规则匹配，否则没必要规则匹配走后续的流程，这里之所以不选国内的dns，不是怕返回错误的ip，即使返回错误的ip也会触发后续的流程规则，直连的走direct-nameserver解析，代理的直接让代理节点进行解析，本地不进行操控
  #第一是怕返回无此域名，第二是防止被记录了。
  #常见的代理协议都支持远端解析。
  #规则为ip类型的，也会触发nameserver，因为域名必须解析了才能知道ip是否匹配，然后才能根据规则判断走直连还是代理
  nameserver: #默认的域名解析服务器
  - 'https://[2001:4860:4860::64]/dns-query#proxy&ecs=39.134.187.0/24&ecs-override=true'
  - 'tls://1dot1dot1dot1.cloudflare-dns.com#proxy&ecs=39.134.187.0/24&ecs-override=true'
  - 'tls://unfiltered.adguard-dns.com#proxy&ecs=39.134.187.0/24&ecs-override=true'
  - 'tls://dns.mullvad.net#proxy&ecs=39.134.187.0/24&ecs-override=true'
  - 'https://dns.nextdns.io/dns-query#proxy&ecs=39.134.187.0/24&ecs-override=true'

#fake-ip 模式下，Clash 会将原始的域名（hostname）发送到预先配置的远端DNS 服务器进行解析
#对fake-ip-filter中条目的查询行为会回退到redir-host，即在本地发起DNS查询，并返回真实IP结果
  enhanced-mode: fake-ip
  fake-ip-filter-mode: blacklist #blacklist 模式只要没命中fake-ip-filter,都会给fake ip
  fake-ip-filter: #fakeip 过滤，以下地址不会下发 fakeip 映射用于连接
  - +.tvkuai.com
  - 'RULE-SET,other_ssk_lan_non_ip'
  - 'RULE-SET,geosite_private_domains'
  - 'RULE-SET,geosite_connectivity_check'
  fake-ip-range: 198.18.0.1/16

# 代理组配置
proxy-groups:
  - name: ✈️ 选择代理
    type: select
    proxies:
      - ⚡️ 自动优选
      - ⚖️ 负载均衡-同一url同一节点
      - ⚖️ 负载均衡-同一url不同节点
      - 👆 手动选择

  - name: ⚡️ 自动优选
    type: url-test # 通过 URL 测试选择延迟最低的节点
    tolerance: 10 # 延迟容忍值（ms），当最优节点延迟与新节点差异小于此值时不切换
    include-all-proxies: true # 包含所有节点进行测试
    include-all: true
    url: "https://cp.cloudflare.com/generate_204" 
    expected-status: 204 # 期望获得 204 状态码，确保测试的准确性，避免被劫持
    interval: 120 # 健康检查间隔（秒）
    timeout: 3000 # 健康检查超时时间（毫秒）
    max-failed-times: 2 # 最大失败次数
    lazy: true # 懒加载，启动时不进行测试

  - name: ⚖️ 负载均衡-同一url同一节点
    type: load-balance # 实现流量的负载均衡
    strategy: consistent-hashing # 轮询策略，确保同一目标地址使用同一节点
    include-all-proxies: true
    include-all: true
    url: "https://cp.cloudflare.com/generate_204"
    expected-status: 204
    interval: 120
    timeout: 3000
    max-failed-times: 2
    lazy: true

  - name: ⚖️ 负载均衡-同一url不同节点
    type: load-balance # 实现流量的负载均衡
    strategy: round-robin # 轮询策略，将会把所有的请求分配给策略组内不同的代理节点
    include-all-proxies: true
    include-all: true
    url: "https://cp.cloudflare.com/generate_204"
    expected-status: 204
    interval: 120
    timeout: 3000
    max-failed-times: 2
    lazy: true

  - name: 👆 手动选择
    type: select # 手动选择节点
    include-all-proxies: true
    include-all: true
    url: "https://cp.cloudflare.com/generate_204"
    expected-status: 204
    interval: 120
    timeout: 3000
    max-failed-times: 2
    lazy: true

  - name: GoogleApi #没办法，好多代理可以访问google，但是googleapis访问不了。。。
    type: url-test # 通过 URL 测试选择延迟最低的节点
    tolerance: 10 # 延迟容忍值（ms），当最优节点延迟与新节点差异小于此值时不切换
    include-all-proxies: true # 包含所有节点进行测试
    include-all: true
    url: "https://www.google.com/generate_204" # gstatic是访问cdn的，这个链接是用来访问主站的。
    expected-status: 204 #
    interval: 120 # 健康检查间隔（秒）
    timeout: 3000 # 健康检查超时时间（毫秒）
    max-failed-times: 2 # 最大失败次数
    lazy: true # 懒加载，启动时不进行测试

  - name: Telegram #没办法，好多代理可以访问google，但是Telegram访问不了。。。
    type: url-test # 通过 URL 测试选择延迟最低的节点
    tolerance: 10 # 延迟容忍值（ms），当最优节点延迟与新节点差异小于此值时不切换
    include-all-proxies: true # 包含所有节点进行测试
    include-all: true
    url: "https://api.telegram.org"
    expected-status: 302 # 你没看错，确实是302重定向，能确认可以访问tg了
    interval: 120 # 健康检查间隔（秒）
    timeout: 3000 # 健康检查超时时间（毫秒）
    max-failed-times: 2 # 最大失败次数
    lazy: true # 懒加载，启动时不进行测试

  - name: v2ex #没办法，好多代理可以访问google，但是Telegram访问不了。。。
    type: url-test # 通过 URL 测试选择延迟最低的节点
    tolerance: 10 # 延迟容忍值（ms），当最优节点延迟与新节点差异小于此值时不切换
    include-all-proxies: true # 包含所有节点进行测试
    include-all: true
    url: "https://www.v2ex.com/generate_204"
    expected-status: 204 
    interval: 120 # 健康检查间隔（秒）
    timeout: 3000 # 健康检查超时时间（毫秒）
    max-failed-times: 2 # 最大失败次数
    lazy: true # 懒加载，启动时不进行测试

# 规则集提供者 (Rule Providers)
rule-providers:
  # --- self 规则集 ---
  self_gemini_site:
    type: http
    behavior: classical
    format: yaml
    url: "https://cdn.jsdelivr.net/gh/busymilk/clash_config_auto_build@refs/heads/main/rules/gemini_rules.yaml"
    path: ./ruleset/self_gemini_site.rules
    interval: 86400

  # --- Loyalsoldier 规则集 ---
  loy_reject:
    type: http
    behavior: domain
    format: text
    url: "https://cdn.jsdelivr.net/gh/Loyalsoldier/v2ray-rules-dat@release/reject-list.txt"
    path: ./ruleset/loy_reject.rules
    interval: 86400
  loy_gfw:
    type: http
    behavior: domain
    format: text
    url: "https://cdn.jsdelivr.net/gh/Loyalsoldier/v2ray-rules-dat@release/gfw.txt"
    path: ./ruleset/loy_gfw.rules
    interval: 86400
    
  # --- GeoSite 域名规则集 ---
  geosite_@ads:
    type: http
    behavior: classical
    format: yaml
    url: "https://cdn.jsdelivr.net/gh/busymilk/v2fly-domain-list-community_rule_set@main/clash-rules-generated/collect_tag_ads.txt"
    path: ./ruleset/geosite_@ads.rules
    interval: 86400
  geosite_@cn_domains:
    type: http
    behavior: classical
    format: yaml
    url: "https://cdn.jsdelivr.net/gh/busymilk/v2fly-domain-list-community_rule_set@main/clash-rules-generated/collect_tag_cn.txt"
    path: ./ruleset/geosite_@cn_domains.rules
    interval: 86400
  geosite_@!cn_domains:
    type: http
    behavior: classical
    format: yaml
    url: "https://cdn.jsdelivr.net/gh/busymilk/v2fly-domain-list-community_rule_set@main/clash-rules-generated/collect_tag_!cn.txt"
    path: ./ruleset/geosite_@!cn_domains.rules
    interval: 86400
  geosite_private_domains:
    type: http
    behavior: classical
    format: yaml
    url: "https://cdn.jsdelivr.net/gh/busymilk/v2fly-domain-list-community_rule_set@main/clash-rules-generated/private.txt"
    path: ./ruleset/geosite_private_domains.rules
    interval: 86400
  geosite_bing:
    type: http
    behavior: classical
    format: yaml
    url: "https://cdn.jsdelivr.net/gh/busymilk/v2fly-domain-list-community_rule_set@main/clash-rules-generated/bing.txt"
    path: ./ruleset/geosite_bing.rules
    interval: 86400
  geosite_google:
    type: http
    behavior: classical
    format: yaml
    url: "https://cdn.jsdelivr.net/gh/busymilk/v2fly-domain-list-community_rule_set@main/clash-rules-generated/google.txt"
    path: ./ruleset/geosite_google.rules
    interval: 86400
  geosite_telegram:
    type: http
    behavior: classical
    format: yaml
    url: "https://cdn.jsdelivr.net/gh/busymilk/v2fly-domain-list-community_rule_set@main/clash-rules-generated/telegram.txt"
    path: ./ruleset/geosite_telegram.rules
    interval: 86400
  geosite_connectivity_check:
    type: http
    behavior: classical
    format: yaml
    url: "https://cdn.jsdelivr.net/gh/busymilk/v2fly-domain-list-community_rule_set@main/clash-rules-generated/connectivity-check.txt"
    path: ./ruleset/geosite_connectivity_check.rules
    interval: 86400
  geosite_cn:
    type: http
    behavior: classical
    format: yaml
    url: "https://cdn.jsdelivr.net/gh/busymilk/v2fly-domain-list-community_rule_set@main/clash-rules-generated/cn.txt"
    path: ./ruleset/geosite_cn.rules
    interval: 86400
  geosite_!cn:
    type: http
    behavior: classical
    format: yaml
    url: "https://cdn.jsdelivr.net/gh/busymilk/v2fly-domain-list-community_rule_set@main/clash-rules-generated/geolocation-!cn.txt"
    path: ./ruleset/geosite_!cn.rules
    interval: 86400

  geosite_apple:
    type: http
    behavior: classical
    format: yaml
    url: "https://cdn.jsdelivr.net/gh/busymilk/v2fly-domain-list-community_rule_set@main/clash-rules-generated/apple.txt"
    path: ./ruleset/geosite_apple.rules
    interval: 86400

  # --- GeoIP IP 规则集 ---
  geoip_lan_ip:
    type: http
    behavior: ipcidr
    format: text
    url: "https://cdn.jsdelivr.net/gh/busymilk/v2fly-domain-list-community_rule_set@main/geoip-rules-generated/geoip_private.txt"
    path: ./ruleset/geoip_lan_ip.rules
    interval: 86400
  geoip_cn_ip:
    type: http
    behavior: ipcidr
    format: text
    url: "https://cdn.jsdelivr.net/gh/busymilk/v2fly-domain-list-community_rule_set@main/geoip-rules-generated/geoip_cn.txt"
    path: ./ruleset/geoip_cn_ip.rules
    interval: 86400

  geoip_telegram_ip:
    type: http
    behavior: ipcidr
    format: text
    url: "https://cdn.jsdelivr.net/gh/busymilk/v2fly-domain-list-community_rule_set@main/geoip-rules-generated/geoip_telegram.txt"
    path: ./ruleset/geoip_telegram.rules
    interval: 86400

  other_direct_applications:
    type: http
    behavior: classical # 经典模式，匹配应用进程名
    url: "https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/applications.txt"
    path: ./ruleset/other_direct_applications.yaml
    interval: 86400 # 每天更新一次

  other_ssk_lan_non_ip:
    type: http
    behavior: classical
    format: text
    interval: 86400
    url: https://ruleset.skk.moe/Clash/non_ip/lan.txt
    path: ./sukkaw_ruleset/ssk_lan_non_ip.txt

  other_ssk_lan_ip:
    type: http
    behavior: classical
    format: text
    interval: 86400
    url: https://ruleset.skk.moe/Clash/ip/lan.txt
    path: ./sukkaw_ruleset/ssk_lan_ip.txt

  other_ssk_global_non_ip:
    type: http
    behavior: classical
    format: text
    interval: 86400
    url: https://ruleset.skk.moe/Clash/non_ip/global.txt
    path: ./sukkaw_ruleset/ssk_global_non_ip.txt

# 路由规则 (Rules) #参考：https://www.aloxaf.com/2025/04/how_to_use_geosite/ 重要是@cn 和 @!cn 的使用以及先后顺序
rules:

  #---------------------------------------------------------
  #广告拦截
  - RULE-SET,loy_reject,REJECT
  - RULE-SET,geosite_@ads,REJECT
  #---------------------------------------------------------
  #自己增加的规则
  - DOMAIN,time.apple.com,DIRECT
  - DOMAIN,cdn.jsdelivr.net,DIRECT
  - DOMAIN,a.ppconverter.eu.org,DIRECT
  - DOMAIN,clash.razord.top,DIRECT
  - DOMAIN,yacd.haishan.me,DIRECT
  - 'DOMAIN-SUFFIX,ghproxy.com,DIRECT'
  - 'DOMAIN-SUFFIX,facefusion.io,✈️ 选择代理'
  - 'DOMAIN-SUFFIX,anaconda.com,✈️ 选择代理'
  - 'DOMAIN-SUFFIX,modelscope.cn,DIRECT'
  - 'DOMAIN-SUFFIX,akfamily.xyz,DIRECT'
  - 'DOMAIN,shared.cdn.queniuqe.com,DIRECT'
  - 'DOMAIN-SUFFIX,1fichier.com,DIRECT'
  - 'PROCESS-NAME,Telegram,Telegram'
  - 'DOMAIN-SUFFIX,v2ex.com,v2ex'
  - 'DOMAIN-KEYWORD,alibaba-cn,DIRECT' #icloud会使用到这个alibaba-cn-pvg-00001.oss-enet.aliyuncs.com
 #---------------------------------------------------------
#直连应用
  - RULE-SET,other_direct_applications,DIRECT
#---------------------------------------------------------
#内网域名
  - RULE-SET,other_ssk_lan_non_ip,DIRECT
  - RULE-SET,geosite_private_domains,DIRECT
#---------------------------------------------------------
#连通性测试
  - RULE-SET,geosite_connectivity_check,DIRECT
#---------------------------------------------------------
#特定域名
  - RULE-SET,self_gemini_site,GoogleApi #Gemini用
  - RULE-SET,geosite_apple,DIRECT
  - RULE-SET,geosite_bing,✈️ 选择代理
  - RULE-SET,geosite_google,✈️ 选择代理
  - RULE-SET,geosite_telegram,Telegram
#---------------------------------------------------------
#国外域名补充（被国内dns污染的,或者被墙的）——ssk and gfw
  - RULE-SET,loy_gfw,✈️ 选择代理
  - RULE-SET,other_ssk_global_non_ip,✈️ 选择代理
  
#原版geolocation-!cn域名集合里掺杂的@cn国内域名
  - RULE-SET,geosite_@cn_domains,DIRECT
#国外域名
  - RULE-SET,geosite_!cn,✈️ 选择代理
  
#原版geolocation-cn域名集合里掺杂的@!cn部分国外域名
  - RULE-SET,geosite_@!cn_domains,✈️ 选择代理
#国内域名
  - RULE-SET,geosite_cn,DIRECT  

#---------------------------------------------------------

#走到ip规则这里的，都是域名的漏网之鱼，或者直接ip类型的请求
#(,no-resolve)是跳过域名对ip的匹配，正常情况下域名为了匹配ip规则，会在本地进行dns解析（也就是nameserver），获得了ip然后用获得的ip来对ip规则进行匹配
#如果使用no-resolve，则域名请求走到ip规则匹配了，就跳过这一条规则，走下一条。
#相当于使用no-resolve的规则只会对直接ip类的请求起作用
#内网ip
  - RULE-SET,geoip_lan_ip,DIRECT,no-resolve
  - RULE-SET,other_ssk_lan_ip,DIRECT,no-resolve

#国外ip
  - RULE-SET,geoip_telegram_ip,Telegram,no-resolve

#国内ip
  - RULE-SET,geoip_cn_ip,DIRECT,no-resolve
#---------------------------------------------------------
#兜底规则 这里不写no-resolve，是默认上面那些规则里的域名都是真实存在的（对于自己来说，域名不存在的情况比较小，谁会经常访问一个不存在的域名呢）
#漏到这里的都是没命中的，需要nameserver解析判断下是否域名存在（如果是域名的话）
  - MATCH,✈️ 选择代理
